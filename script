class NoScreenSleep {
    constructor() {
        // DOM Elements
        this.toggleInput = document.getElementById('toggle-switch');
        this.toggleStatus = document.getElementById('toggle-status');
        this.timeDisplay = document.getElementById('time-display');
        this.video = document.getElementById('video-background');
        this.customMinutesInput = document.getElementById('custom-minutes');
        this.setTimerBtn = document.getElementById('set-timer');
        this.timerPresets = document.querySelectorAll('.timer-btn');
        
        // State
        this.isActive = false;
        this.wakeLock = null;
        this.activeSeconds = 0;
        this.timerInterval = null;
        this.countdownInterval = null;
        this.selectedMinutes = 0;
        this.showingCountdown = false;
        
        // Initialize
        this.init();
    }
    
    init() {
        // Toggle button
        this.toggleInput.addEventListener('change', () => {
            this.isActive = this.toggleInput.checked;
            this.toggleStatus.textContent = this.isActive ? "Screen is on" : "Screen is off";
            
            if (this.isActive) {
                this.startSession();
            } else {
                this.endSession();
                this.resetTimer();
            }
        });
        
        // Timer presets
        this.timerPresets.forEach(btn => {
            btn.addEventListener('click', () => {
                this.handleTimerSelection(btn);
                this.activateIfTimerSet();
            });
        });
        
        // Custom timer
        this.setTimerBtn.addEventListener('click', () => {
            const mins = parseInt(this.customMinutesInput.value);
            if (mins > 0 && mins <= 240) {
                this.timerPresets.forEach(b => b.classList.remove('active'));
                this.selectedMinutes = mins;
                this.activateIfTimerSet();
            }
        });
        
        // Start time tracking
        this.timerInterval = setInterval(() => this.updateTime(), 1000);
    }
    
    handleTimerSelection(btn) {
        this.timerPresets.forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        this.selectedMinutes = parseInt(btn.dataset.minutes);
        this.customMinutesInput.value = '';
    }
    
    activateIfTimerSet() {
        if (this.selectedMinutes > 0 && !this.isActive) {
            this.toggleInput.checked = true;
            const event = new Event('change');
            this.toggleInput.dispatchEvent(event);
        } else if (this.selectedMinutes > 0 && this.isActive) {
            this.startCountdown();
        }
    }
    
    startSession() {
        // Start wake lock
        this.attemptWakeLock();
        
        // Start video fallback
        this.video.play().catch(e => console.log("Video fallback:", e));
        
        // Start countdown if timer set
        if (this.selectedMinutes > 0) {
            this.startCountdown();
        }
    }
    
    endSession() {
        // Release wake lock
        if (this.wakeLock !== null) {
            this.wakeLock.release();
            this.wakeLock = null;
        }
        
        // Stop video
        this.video.pause();
        this.video.currentTime = 0;
        
        // Clear countdown
        this.clearCountdown();
    }
    
    clearCountdown() {
        if (this.countdownInterval) {
            clearInterval(this.countdownInterval);
            this.countdownInterval = null;
            this.showingCountdown = false;
        }
    }
    
    resetTimer() {
        this.activeSeconds = 0;
        this.selectedMinutes = 0;
        this.timerPresets.forEach(b => b.classList.remove('active'));
        this.customMinutesInput.value = '';
        this.updateTimeDisplay();
    }
    
    async attemptWakeLock() {
        if (!('wakeLock' in navigator)) return;
        
        try {
            this.wakeLock = await navigator.wakeLock.request('screen');
            this.wakeLock.addEventListener('release', () => {
                if (this.isActive) this.attemptWakeLock();
            });
        } catch (err) {
            console.log("Wake Lock error:", err);
        }
    }
    
    startCountdown() {
        this.clearCountdown();
        
        let secondsLeft = this.selectedMinutes * 60;
        this.updateCountdownDisplay(secondsLeft);
        this.showingCountdown = true;
        
        this.countdownInterval = setInterval(() => {
            secondsLeft--;
            this.updateCountdownDisplay(secondsLeft);
            
            if (secondsLeft <= 0) {
                this.toggleInput.checked = false;
                const event = new Event('change');
                this.toggleInput.dispatchEvent(event);
                this.resetTimer();
            }
        }, 1000);
    }
    
    updateCountdownDisplay(seconds) {
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        this.timeDisplay.textContent = `${mins}:${secs.toString().padStart(2, '0')}`;
    }
    
    updateTime() {
        if (this.isActive && !this.showingCountdown) {
            this.activeSeconds++;
            this.updateTimeDisplay();
        }
    }
    
    updateTimeDisplay() {
        const hours = Math.floor(this.activeSeconds / 3600);
        const mins = Math.floor((this.activeSeconds % 3600) / 60);
        const secs = this.activeSeconds % 60;
        this.timeDisplay.textContent = `${hours.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }
    
    toggle() {
        this.toggleInput.checked = !this.toggleInput.checked;
        const event = new Event('change');
        this.toggleInput.dispatchEvent(event);
    }
}

// Initialize when ready
document.addEventListener('DOMContentLoaded', () => {
    new NoScreenSleep();
});
