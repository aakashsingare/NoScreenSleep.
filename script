class NoScreenSleep {
    constructor() {
        this.initElements();
        this.initState();
        this.initEventListeners();
        this.setupTimers();
        this.checkCompatibility();
        this.updateYear();
        
        console.log("NoScreenSleep initialized");
    }

    initElements() {
        this.toggleInput = document.getElementById('toggle-switch');
        this.toggleStatus = document.getElementById('toggle-status');
        this.timeDisplay = document.getElementById('time-display');
        this.canvas = document.getElementById('wake-lock-canvas');
        this.customMinutesInput = document.getElementById('custom-minutes');
        this.setTimerBtn = document.getElementById('set-timer');
        this.timerPresets = document.querySelectorAll('.timer-btn');
        this.compatibilityNotice = document.getElementById('compatibility-notice');
    }

    initState() {
        this.isActive = false;
        this.wakeLock = null;
        this.activeSeconds = 0;
        this.selectedMinutes = 0;
        this.showingCountdown = false;
        this.lastUpdate = performance.now();
        this.timeCorrection = 0;
        this.countdownInterval = null;
        this.animationFrameId = null;
        this.canvasCtx = this.canvas.getContext('2d');
        
        // Setup canvas
        this.canvas.width = 1;
        this.canvas.height = 1;
    }

    checkCompatibility() {
        let notice = "Works on all modern browsers";
        if (!('wakeLock' in navigator)) {
            notice = "Using fallback method (no screen dimming)";
        }
        this.compatibilityNotice.textContent = notice;
    }

    updateYear() {
        document.getElementById('current-year').textContent = new Date().getFullYear();
    }

    initEventListeners() {
        this.toggleInput.addEventListener('change', () => this.handleToggleChange());
        
        this.timerPresets.forEach(btn => {
            btn.addEventListener('click', () => this.handlePresetTimer(btn));
        });
        
        this.setTimerBtn.addEventListener('click', () => this.handleCustomTimer());
        
        document.addEventListener('visibilitychange', () => this.handleVisibilityChange());
        
        window.addEventListener('focus', () => this.syncTime());
        window.addEventListener('blur', () => this.syncTime());
    }

    setupTimers() {
        const updateTime = (timestamp) => {
            if (this.isActive && !this.showingCountdown) {
                const now = performance.now();
                const elapsed = (now - this.lastUpdate) / 1000;
                this.activeSeconds += elapsed;
                this.lastUpdate = now;
                this.updateTimeDisplay();
            }
            this.animationFrameId = requestAnimationFrame(updateTime.bind(this));
        };
        this.animationFrameId = requestAnimationFrame(updateTime.bind(this));
    }

    handleToggleChange() {
        this.isActive = this.toggleInput.checked;
        this.toggleStatus.textContent = this.isActive ? "Screen is awake" : "Screen awake is off";
        
        if (this.isActive) {
            this.startSession();
        } else {
            this.endSession();
            this.resetTimer();
        }
    }

    async startSession() {
        console.log("Starting session");
        await this.attemptWakeLock();
        this.startCanvasFallback();
        
        if (this.selectedMinutes > 0) {
            this.startCountdown();
        }
        
        this.lastUpdate = performance.now();
    }

    endSession() {
        console.log("Ending session");
        
        if (this.wakeLock) {
            this.wakeLock.release();
            this.wakeLock = null;
        }
        
        this.stopCanvasFallback();
        this.clearCountdown();
    }

    async attemptWakeLock() {
        if (!('wakeLock' in navigator)) {
            console.log("Wake Lock API not available");
            return;
        }
        
        try {
            this.wakeLock = await navigator.wakeLock.request('screen');
            console.log("Wake Lock acquired");
            
            this.wakeLock.addEventListener('release', () => {
                console.log("Wake Lock released");
                if (this.isActive) this.attemptWakeLock();
            });
        } catch (err) {
            console.error("Wake Lock error:", err.message);
        }
    }

    startCanvasFallback() {
        console.log("Starting canvas fallback");
        this.canvas.style.display = 'block';
        this.animateCanvas();
    }

    animateCanvas() {
        if (!this.isActive) return;
        
        // Draw a minimal animation to prevent screen sleep
        this.canvasCtx.fillStyle = `hsl(${Date.now() % 360}, 100%, 50%)`;
        this.canvasCtx.fillRect(0, 0, 1, 1);
        
        // Continue animation
        this.canvasAnimationId = requestAnimationFrame(() => this.animateCanvas());
    }

    stopCanvasFallback() {
        if (this.canvasAnimationId) {
            cancelAnimationFrame(this.canvasAnimationId);
            this.canvasAnimationId = null;
        }
        this.canvas.style.display = 'none';
    }

    handlePresetTimer(btn) {
        this.timerPresets.forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        this.selectedMinutes = parseInt(btn.dataset.minutes);
        this.customMinutesInput.value = '';
        
        if (this.isActive && this.selectedMinutes > 0) {
            this.startCountdown();
        } else if (this.isActive) {
            this.clearCountdown();
            this.updateTimeDisplay();
        }
    }

    handleCustomTimer() {
        const mins = parseInt(this.customMinutesInput.value);
        if (mins > 0 && mins <= 1440) {
            this.timerPresets.forEach(b => b.classList.remove('active'));
            this.selectedMinutes = mins;
            
            if (this.isActive) {
                this.startCountdown();
            }
        } else {
            alert("Please enter a value between 1 and 1440 minutes (24 hours)");
        }
    }

    startCountdown() {
        this.clearCountdown();
        this.showingCountdown = true;
        
        const endTime = Date.now() + this.selectedMinutes * 60000;
        
        const updateCountdown = () => {
            const remaining = Math.max(0, endTime - Date.now());
            const seconds = Math.round(remaining / 1000);
            
            this.updateCountdownDisplay(seconds);
            
            if (remaining <= 0) {
                this.toggleInput.checked = false;
                this.handleToggleChange();
            } else {
                this.countdownInterval = setTimeout(updateCountdown, 200);
            }
        };
        
        updateCountdown();
    }

    clearCountdown() {
        if (this.countdownInterval) {
            clearTimeout(this.countdownInterval);
            this.countdownInterval = null;
        }
        this.showingCountdown = false;
    }

    updateCountdownDisplay(seconds) {
        const hours = Math.floor(seconds / 3600);
        const mins = Math.floor((seconds % 3600) / 60);
        const secs = seconds % 60;
        
        this.timeDisplay.textContent = 
            `${hours.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }

    updateTimeDisplay() {
        const totalSeconds = Math.floor(this.activeSeconds + this.timeCorrection);
        const hours = Math.floor(totalSeconds / 3600);
        const mins = Math.floor((totalSeconds % 3600) / 60);
        const secs = totalSeconds % 60;
        
        this.timeDisplay.textContent = 
            `${hours.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }

    handleVisibilityChange() {
        if (document.visibilityState === 'visible' && this.isActive) {
            this.syncTime();
            if ('wakeLock' in navigator && this.wakeLock === null) {
                this.attemptWakeLock();
            }
        }
    }

    syncTime() {
        if (!this.isActive || this.showingCountdown) return;
        
        const now = performance.now();
        const expectedTime = this.activeSeconds + ((now - this.lastUpdate) / 1000);
        const actualTime = this.activeSeconds;
        const drift = expectedTime - actualTime;
        
        if (Math.abs(drift) > 1) {
            console.log(`Correcting time drift: ${drift.toFixed(2)}s`);
            this.timeCorrection += drift;
        }
        
        this.lastUpdate = now;
    }

    resetTimer() {
        this.activeSeconds = 0;
        this.timeCorrection = 0;
        this.selectedMinutes = 0;
        this.timerPresets.forEach(b => b.classList.remove('active'));
        this.customMinutesInput.value = '';
        this.updateTimeDisplay();
    }

    cleanup() {
        if (this.animationFrameId) {
            cancelAnimationFrame(this.animationFrameId);
        }
        this.endSession();
    }
}

// Initialize the application
document.addEventListener('DOMContentLoaded', () => {
    let app;
    try {
        app = new NoScreenSleep();
    } catch (error) {
        console.error("Initialization error:", error);
        alert("Failed to initialize app. Please refresh the page.");
    }

    // Cleanup when page is unloading
    window.addEventListener('beforeunload', () => {
        if (app) app.cleanup();
    });
});
